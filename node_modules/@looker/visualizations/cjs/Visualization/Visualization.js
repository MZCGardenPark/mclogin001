"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Visualization = exports.defaultChartComponent = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@looker/components");

var _styledComponents = require("styled-components");

var _visualizationsTable = require("@looker/visualizations-table");

var _visualizationsVisx = require("@looker/visualizations-visx");

var _visualizationsSingleValue = require("@looker/visualizations-single-value");

var _visualizationsAdapters = require("@looker/visualizations-adapters");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultChartComponent = {
  area: _visualizationsVisx.Area,
  bar: _visualizationsVisx.Bar,
  column: _visualizationsVisx.Column,
  default: _visualizationsTable.Table,
  line: _visualizationsVisx.Line,
  pie: _visualizationsVisx.Pie,
  scatter: _visualizationsVisx.Scatter,
  single_value: _visualizationsSingleValue.SingleValue,
  sparkline: _visualizationsVisx.Sparkline,
  table: _visualizationsTable.Table
};
exports.defaultChartComponent = defaultChartComponent;

const VisualizationComponent = ({
  debug,
  height,
  width
}) => {
  const _useContext = (0, _react.useContext)(_visualizationsAdapters.QueryContext),
        ok = _useContext.ok,
        _useContext$data = _useContext.data,
        data = _useContext$data === void 0 ? [] : _useContext$data,
        error = _useContext.error,
        fields = _useContext.fields,
        totals = _useContext.totals,
        config = _useContext.config,
        loading = _useContext.loading;

  if (loading) {
    return _react.default.createElement(_components.Space, {
      justifyContent: "center",
      p: "small"
    }, _react.default.createElement(_components.ProgressCircular, null));
  }

  if (debug || ok === false) {
    return _react.default.createElement(_visualizationsAdapters.Debug, {
      ok: ok,
      config: config,
      data: data,
      fields: fields,
      error: error
    });
  } else if (config !== null && config !== void 0 && config.type && fields !== null && fields !== void 0 && fields.measures.length) {
    const ChartComponent = defaultChartComponent[config.type];
    return _react.default.createElement(ChartComponent, {
      data: data,
      config: config,
      fields: fields,
      totals: totals,
      width: width,
      height: height
    });
  } else {
    return null;
  }
};

const Visualization = props => {
  const contextValues = (0, _react.useContext)(_visualizationsAdapters.QueryContext);
  const theme = (0, _react.useContext)(_styledComponents.ThemeContext);

  if (!theme) {
    return _react.default.createElement(_components.ComponentsProvider, null, _react.default.createElement(Visualization, props));
  }

  return _react.default.createElement(_visualizationsAdapters.ErrorBoundary, {
    contextValues: contextValues
  }, _react.default.createElement(VisualizationComponent, props));
};

exports.Visualization = Visualization;
//# sourceMappingURL=Visualization.js.map