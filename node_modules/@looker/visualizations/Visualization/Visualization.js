import React, { useContext } from 'react';
import { ProgressCircular, Space, ComponentsProvider } from '@looker/components';
import { ThemeContext } from 'styled-components';
import { Table } from '@looker/visualizations-table';
import { Area, Bar, Column, Sparkline, Line, Scatter, Pie } from '@looker/visualizations-visx';
import { SingleValue } from '@looker/visualizations-single-value';
import { Debug, QueryContext, ErrorBoundary } from '@looker/visualizations-adapters';
export var defaultChartComponent = {
  area: Area,
  bar: Bar,
  column: Column,
  "default": Table,
  line: Line,
  pie: Pie,
  scatter: Scatter,
  single_value: SingleValue,
  sparkline: Sparkline,
  table: Table
};

var VisualizationComponent = function VisualizationComponent(_ref) {
  var debug = _ref.debug,
      height = _ref.height,
      width = _ref.width;

  var _useContext = useContext(QueryContext),
      ok = _useContext.ok,
      _useContext$data = _useContext.data,
      data = _useContext$data === void 0 ? [] : _useContext$data,
      error = _useContext.error,
      fields = _useContext.fields,
      totals = _useContext.totals,
      config = _useContext.config,
      loading = _useContext.loading;

  if (loading) {
    return React.createElement(Space, {
      justifyContent: "center",
      p: "small"
    }, React.createElement(ProgressCircular, null));
  }

  if (debug || ok === false) {
    return React.createElement(Debug, {
      ok: ok,
      config: config,
      data: data,
      fields: fields,
      error: error
    });
  } else if (config !== null && config !== void 0 && config.type && fields !== null && fields !== void 0 && fields.measures.length) {
    var ChartComponent = defaultChartComponent[config.type];
    return React.createElement(ChartComponent, {
      data: data,
      config: config,
      fields: fields,
      totals: totals,
      width: width,
      height: height
    });
  } else {
    return null;
  }
};

export var Visualization = function Visualization(props) {
  var contextValues = useContext(QueryContext);
  var theme = useContext(ThemeContext);

  if (!theme) {
    return React.createElement(ComponentsProvider, null, React.createElement(Visualization, props));
  }

  return React.createElement(ErrorBoundary, {
    contextValues: contextValues
  }, React.createElement(VisualizationComponent, props));
};
//# sourceMappingURL=Visualization.js.map